package com.example.myapplication

import androidx.compose.ui.unit.Dp
import android.os.Bundle
import android.widget.Toast
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.text.KeyboardActions
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material3.Button
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.input.ImeAction
import androidx.compose.ui.unit.dp
import java.time.LocalDate
import java.time.format.DateTimeFormatter
import androidx.compose.ui.tooling.preview.Preview
import java.util.Calendar
import java.text.SimpleDateFormat
import java.util.Locale



enum class Role {
    STUDENT, TEACHER
}

enum class Attendance {
    ATTENDED, LATE, ABSENT, UPCOMING // Added LATE and ABSENT
}

data class Lesson(
    val time: String,
    val name: String,
    var attendance: Attendance, // Changed type to Attendance enum
    val day: String
)

data class User(
    val username: String,
    val password: String,
    val role: Role,
    val major: String? = null, // Applicable for both teachers and students
    var lessons: MutableList<Lesson> // Change to mutable list
)



val users = mapOf(
    // IT Students
    "janco" to User(
        username = "janco",
        password = "itPass",
        role = Role.STUDENT,
        major = "IT",
        lessons = mutableListOf(
            Lesson("08:00", "Software Development", attendance = Attendance.UPCOMING, day = "Monday"),
            Lesson("10:00", "Network Security", attendance = Attendance.UPCOMING, day = "Monday")
        )
    ),
    "lisa" to User(
        username = "lisa",
        password = "itPass123",
        role = Role.STUDENT,
        major = "IT",
        lessons = mutableListOf(
            Lesson("08:00", "Software Development", attendance = Attendance.UPCOMING, day = "Monday"),
            Lesson("10:00", "Data Structures", attendance = Attendance.UPCOMING, day = "Monday")
        )
    ),

    // Philosophy Students
    "magnus" to User(
        username = "magnus",
        password = "philosophyPass",
        role = Role.STUDENT,
        major = "Philosophy",
        lessons = mutableListOf(
            Lesson("09:00", "Metaphysics", attendance = Attendance.UPCOMING, day = "Tuesday"),
            Lesson("11:00", "Ethics", attendance = Attendance.UPCOMING, day = "Tuesday")
        )
    ),
    "sophia" to User(
        username = "sophia",
        password = "philosophyPass123",
        role = Role.STUDENT,
        major = "Philosophy",
        lessons = mutableListOf(
            Lesson("09:00", "Ancient Philosophy", attendance = Attendance.UPCOMING, day = "Tuesday"),
            Lesson("11:00", "Modern Philosophy", attendance = Attendance.UPCOMING, day = "Tuesday")
        )
    ),

    // AI Students
    "jeroen" to User(
        username = "jeroen",
        password = "aiPass",
        role = Role.STUDENT,
        major = "AI",
        lessons = mutableListOf(
            Lesson("10:00", "Machine Learning", attendance = Attendance.UPCOMING, day = "Wednesday"),
            Lesson("12:00", "Neural Networks", attendance = Attendance.UPCOMING, day = "Wednesday")
        )
    ),
    "alex" to User(
        username = "alex",
        password = "aiPass123",
        role = Role.STUDENT,
        major = "AI",
        lessons = mutableListOf(
            Lesson("10:00", "Robotics", attendance = Attendance.UPCOMING, day = "Wednesday"),
            Lesson("12:00", "Computer Vision", attendance = Attendance.UPCOMING, day = "Wednesday")
        )
    ),

    // Teachers
    "bob" to User(
        username = "bob",
        password = "itTeacherPass",
        role = Role.TEACHER,
        major = "IT",
        lessons = mutableListOf() // Empty list since teachers don't have their own lessons in this context
    ),
    "steven" to User(
        username = "steven",
        password = "philosophyTeacherPass",
        role = Role.TEACHER,
        major = "Philosophy",
        lessons = mutableListOf() // Empty list for the same reason
    ),
    "tim" to User(
        username = "tim",
        password = "aiTeacherPass",
        role = Role.TEACHER,
        major = "AI",
        lessons = mutableListOf() // Empty list for the same reason
    )
    // ... add more users as needed
)



class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            LoginScreen()
        }
    }
}

@Composable
fun LoginScreen() {
    var username by remember { mutableStateOf("") }
    var password by remember { mutableStateOf("") }
    var loggedInUser by remember { mutableStateOf<User?>(null) }
    val context = LocalContext.current

    loggedInUser?.let { user ->
        when (user.role) {
            Role.STUDENT -> AgendaScreen(user)
            Role.TEACHER -> TeacherAgendaScreen(user, users.values.toList())
        }
    } ?: run {
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(16.dp),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.Center
        ) {
            OutlinedTextField(
                value = username,
                onValueChange = { username = it },
                label = { Text("Username") },
                singleLine = true,
                keyboardOptions = KeyboardOptions(imeAction = ImeAction.Next)
            )
            Spacer(modifier = Modifier.height(8.dp))
            OutlinedTextField(
                value = password,
                onValueChange = { password = it },
                label = { Text("Password") },
                singleLine = true,
                keyboardOptions = KeyboardOptions(imeAction = ImeAction.Done),
                keyboardActions = KeyboardActions(onDone = {
                    val user = users[username]
                    if (user != null && user.password == password) {
                        loggedInUser = user
                    } else {
                        Toast.makeText(context, "Invalid credentials", Toast.LENGTH_SHORT).show()
                    }
                })
            )
            Spacer(modifier = Modifier.height(16.dp))
            Button(onClick = {
                val user = users[username]
                if (user != null && user.password == password) {
                    loggedInUser = user
                } else {
                    Toast.makeText(context, "Invalid credentials", Toast.LENGTH_SHORT).show()
                }
            }) {
                Text("Login")
            }
        }
    }
}


@Composable
fun TeacherAgendaScreen(teacher: User, allStudents: List<User>) {
    val students = remember { mutableStateListOf<User>().also { list -> list.addAll(allStudents) } }

    Column(modifier = Modifier.padding(16.dp)) {
        Text(text = "${teacher.username}'s Dashboard for ${teacher.major}", style = MaterialTheme.typography.headlineSmall)
        Spacer(modifier = Modifier.height(16.dp))

        LazyColumn {
            items(items = students.filter { it.major == teacher.major && it.role == Role.STUDENT }, key = { it.username }) { student ->
                Text(text = "${student.username}'s Agenda", style = MaterialTheme.typography.headlineSmall)
                Spacer(modifier = Modifier.height(8.dp))

                student.lessons.forEachIndexed { index, lesson ->
                    LessonItem(lesson, onAttendanceChange = { updatedLesson, newStatus ->
                        // Create a new updated user with modified lessons
                        val updatedUser = student.copy(
                            lessons = student.lessons.toMutableList().apply {
                                set(index, updatedLesson.copy(attendance = newStatus))
                            }
                        )
                        // Replace the student in the students list
                        students[students.indexOf(student)] = updatedUser
                    })
                }
                Spacer(modifier = Modifier.height(16.dp))
            }
        }
    }
}





@Composable
fun AgendaScreen(user: User) {
    val calendar = Calendar.getInstance()
    val dateFormat = SimpleDateFormat("EEEE dd/MM", Locale.getDefault())
    val formattedDate = dateFormat.format(calendar.time)


    val lessons = remember { mutableStateListOf<Lesson>().also { it.addAll(user.lessons) } }

    Column(modifier = Modifier.padding(16.dp)) {
        Text(text = "Welcome ${user.username}, here is your agenda for today: $formattedDate", style = MaterialTheme.typography.headlineSmall)
        Spacer(modifier = Modifier.height(16.dp))

        LazyColumn {
            items(items = lessons, key = { it.time }) { lesson ->
                LessonItem(lesson = lesson, onAttendanceChange = null) // Students do not have the option to change attendance
            }
        }
    }
}



@Composable
fun LessonItem(
    lesson: Lesson,
    onAttendanceChange: ((Lesson, Attendance) -> Unit)? = null
) {
    val attendanceColor = when (lesson.attendance) {
        Attendance.ATTENDED -> Color.Green
        Attendance.LATE -> Color.Yellow
        Attendance.ABSENT -> Color.Red
        Attendance.UPCOMING -> Color.LightGray // Use a neutral color for upcoming lessons
    }

    Column(
        modifier = Modifier
            .fillMaxWidth()
            .background(Color(0xFFFAFAFA))
            .padding(8.dp) // Add padding to the Column
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .background(attendanceColor)
                .padding(horizontal = 8.dp, vertical = 4.dp)
        ) {
            Column(
                modifier = Modifier
                    .weight(1f)
                    .padding(start = 8.dp)
            ) {
                Text(text = lesson.time, style = MaterialTheme.typography.bodyLarge)
                Text(text = lesson.name, style = MaterialTheme.typography.bodyMedium)
            }
            // Use a conditional Row composable to organize the buttons if available
            if (onAttendanceChange != null) {
                Row(
                    modifier = Modifier
                        .padding(start = 8.dp)
                        .align(Alignment.CenterVertically)
                ) {
                    Button(onClick = { onAttendanceChange(lesson, Attendance.ATTENDED) }) {
                        Text("Attended")
                    }
                    Spacer(modifier = Modifier.width(4.dp)) // Add spacing between buttons
                    Button(onClick = { onAttendanceChange(lesson, Attendance.LATE) }) {
                        Text("Late")
                    }
                    Spacer(modifier = Modifier.width(4.dp)) // Add spacing between buttons
                    Button(onClick = { onAttendanceChange(lesson, Attendance.ABSENT) }) {
                        Text("Absent")
                    }
                }
            } else {
                Text(
                    text = lesson.attendance.name,
                    color = Color.White,
                    modifier = Modifier.align(Alignment.CenterVertically)
                )
            }
        }
        CustomDivider(color = Color.LightGray, thickness = 1.dp)
    }
}



@Composable
fun CustomDivider(color: Color, thickness: Dp) {
    Box(
        modifier = Modifier
            .fillMaxWidth()
            .height(thickness)
            .background(color)
    )
}

@Preview(showBackground = true)
@Composable
fun DefaultPreview() {
    MaterialTheme {
        LoginScreen()
    }
}
